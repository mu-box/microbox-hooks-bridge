#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

require 'ipaddr'

include Hooky::Openvpn
config = converge( CONFIG_DEFAULTS, payload[:config] || {} )

# ensure data directory exists
directory '/data/var/db/openvpn' do
  recursive true
end

# ensure the etc config directory exists
directory '/data/etc/openvpn' do
  recursive true
end

if payload[:platform] == "local"
  execute 'cp -r /data/share/microbox/* /data/var/db/openvpn' do
    cwd '/data/var/db/openvpn'
    not_if { ::File.exists? '/data/var/db/openvpn/pki' }
  end
end

if ! ::File.exists? '/etc/microinit.d/bridge.sh' and ! ::File.exists? '/data/etc/openvpn/openvpn.conf'
  ip_addr = `ip addr show dev eth0`
  ip = /\s+inet ([0-9.].+)\/([0-9]+) (brd [0-9.].+ )?scope/.match(ip_addr).captures[0]
  cidr = /\s+inet ([0-9.].+)\/([0-9]+) (brd [0-9.].+ )?scope/.match(ip_addr).captures[1]
  netmask = IPAddr.new('255.255.255.255').mask(cidr.to_i).to_s

  ip_route = `ip route`
  default_gateway = /default via ([0-9.]+) dev/.match(ip_route).captures[0]

  end_ip = IPAddr.new("#{ip}/#{cidr}").to_range.to_a[-2]
  begin_ip = IPAddr.new("#{ip}/#{cidr}").to_range.to_a[-(1 + config[:ips])]

  # generate the config file
  template '/data/etc/openvpn/openvpn.conf' do
    source 'openvpn.conf.erb'
    mode 0644
    variables ({ config: config, ip: ip, netmask: netmask, begin_ip: begin_ip, end_ip: end_ip })
    owner 'gomicro'
    group 'gomicro'
    not_if { ::File.exists? '/data/etc/openvpn/openvpn.conf' }
  end

  template '/etc/microinit.d/bridge.sh' do
    source 'bridge.sh.erb'
    mode 755
    variables ({ip: ip, cidr: cidr, default_gateway: default_gateway})
    owner 'root'
    group 'root'
    not_if { ::File.exists? '/etc/microinit.d/bridge.sh' }
  end

  execute '/etc/microinit.d/bridge.sh start' do
    cwd '/etc/microinit.d'
  end
end

template '/data/var/db/openvpn/openssl-1.0.cnf' do
  source 'openssl-1.0.cnf.erb'
  owner 'root'
  group 'root'
  not_if { ::File.exists? '/data/var/db/openvpn/openssl-1.0.cnf' }
end

link '/data/var/db/openvpn/x509-types' do
  to '/data/share/examples/easyrsa/x509-types'
  not_if { ::File.exists? '/data/var/db/openvpn/x509-types' }
end

execute '/data/bin/easyrsa init-pki' do
  cwd '/data/var/db/openvpn'
  not_if { ::File.exists? '/data/var/db/openvpn/pki' }
end

execute "/data/bin/easyrsa --req-cn=\"Microbox\" --batch build-ca nopass" do
  cwd '/data/var/db/openvpn'
  not_if { ::File.exists? '/data/var/db/openvpn/pki/ca.crt' }
end

execute '/data/bin/easyrsa gen-dh' do
  cwd '/data/var/db/openvpn'
  not_if { ::File.exists? '/data/var/db/openvpn/pki/dh.pem' }
end

execute '/data/bin/easyrsa build-server-full server nopass' do
  cwd '/data/var/db/openvpn'
  not_if { ::File.exists? '/data/var/db/openvpn/pki/issued/server.crt' }
end

execute '/data/bin/easyrsa build-client-full client1 nopass' do
  cwd '/data/var/db/openvpn'
  not_if { ::File.exists? '/data/var/db/openvpn/pki/issued/client1.crt' }
end

if payload[:logvac_host]
  # configure narc
  template '/opt/gomicro/etc/narc.conf' do
    variables ({
      uid: payload[:component][:uid], logvac: payload[:logvac_host]
    })
  end
  # ensure log files are created
  ["/var/log/gomicro/openvpn/current", "/var/log/openvpn.log"].each do |log_file|
    if not ::File.exists? "#{log_file}"
      parent = File.expand_path("..", "#{log_file}")

      # create the parent directory
      directory parent do
        owner 'gomicro'
        group 'gomicro'
        recursive true
      end

      # create the log_file
      file "#{log_file}" do
        owner 'gomicro'
        group 'gomicro'
        mode  0644
      end
    end
  end
end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ed25519_key' }
  end

end
