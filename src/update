#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

local_openvpn_md5 = execute "local openvpn md5" do
  command "cat /var/microbox/openvpn.md5"
  not_if { ! ::File.exists? "/var/microbox/openvpn.md5" }
end

aws_openvpn_md5 = execute "aws openvpn md5" do
  command "curl \
    -f \
    -k \
    https://s3.amazonaws.com/tools.microbox.cloud/openvpn/linux/amd64/openvpn.md5 \
      | tee /var/microbox/openvpn.md5"
end

if local_openvpn_md5 != aws_openvpn_md5
  # Stop openvpn
  service 'openvpn' do
    action :disable
    not_if { !Dir.exist?('/etc/service/openvpn') }
  end

  execute "Download openvpn" do
    command "curl \
      -f \
      -k \
      -o /usr/local/bin/openvpn
      https://s3.amazonaws.com/tools.microbox.cloud/openvpn/linux/amd64/openvpn"
  end

  execute "Chmod openvpn" do
    command "chmod 755 /usr/local/bin/openvpn"
  end

  service 'openvpn' do
    action :enable
    not_if { !Dir.exist?('/etc/service/openvpn') }
  end
end

local_hooks_md5 = execute "local hooks md5" do
  command "cat /var/microbox/hooks.md5"
  not_if { ! ::File.exists? "/var/microbox/hooks.md5" }
end

aws_hooks_md5 = execute "aws hooks md5" do
  command "curl \
    -f \
    -k \
    https://s3.amazonaws.com/tools.microbox.cloud/hooks/openvpn-stable.md5 \
      | tee /var/microbox/hooks.md5"
end

if local_hooks_md5 != aws_hooks_md5
  execute "update hooks" do
    command "curl \
      -f \
      -k \
      https://s3.amazonaws.com/tools.microbox.cloud/hooks/openvpn-stable.tgz \
        | tar -xz -C /opt/microbox/hooks"
  end
end
